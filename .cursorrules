# SIAC Assistant - Coding Standards and Rules

## Core Coding Standards

### 1. Descriptive Naming Convention
- Always use descriptive variable and function/const names
- Use clear, self-documenting names that explain the purpose
- Avoid abbreviations unless they are widely understood
- Use snake_case for Python variables and functions
- Use PascalCase for Python classes
- Use UPPER_CASE for constants

### 2. Documentation Requirements
- All Python functions and FastAPI endpoints must have a docstring that explains its purpose and parameters
- Use Google-style docstrings for consistency
- Include type hints for all function parameters and return values
- Document complex business logic and algorithms

## Additional Quality Standards

### 3. Type Safety
- Use strict typing with Pydantic models
- Prefer Union types over Any when possible
- Use Optional for nullable fields
- Import types from typing module when needed

### 4. Error Handling
- Use specific exception types
- Provide meaningful error messages
- Log errors appropriately
- Handle database connection errors gracefully

### 5. Code Organization
- Group related functionality in modules
- Use clear separation of concerns
- Keep functions focused and single-purpose
- Use dependency injection for better testability

### 6. Database Models
- Use UUID for primary keys
- Define foreign key relationships clearly
- Use appropriate constraints and indexes
- Follow naming conventions for database fields

### 7. API Design
- Use RESTful conventions
- Provide clear HTTP status codes
- Include proper error responses
- Use consistent response formats
- Document all endpoints with OpenAPI

### 8. Security
- Validate all input data
- Use parameterized queries
- Implement proper authentication
- Follow OWASP security guidelines

### 9. Performance
- Use database connection pooling
- Implement proper caching strategies
- Optimize database queries
- Use async/await for I/O operations

### 10. Testing
- Write unit tests for all functions
- Include integration tests for API endpoints
- Test error conditions and edge cases
- Maintain good test coverage


